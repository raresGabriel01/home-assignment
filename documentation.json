{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-83952ef9fbee7d72c46eadb789571467f1e3d36bace05c17e46b98f4fc537e4b916879484ade533ede5325b16e892ef6a6b0d7e0bed1e461d26ffcc1df156f27",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "createMockData(100)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockUser[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "TGridComponent",
                    "type": "component"
                },
                {
                    "name": "TColumnComponent",
                    "type": "component"
                },
                {
                    "name": "TProgressComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { TGridComponent } from './components/t-grid/t-grid.component';\r\nimport { TProgressComponent } from './components/t-progress/t-progress.component';\r\nimport { MockUser, createMockData } from '../stories/t-grid/utils';\r\nimport { TColumnComponent } from './components/t-column/t-column.component';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [RouterOutlet, TGridComponent, TColumnComponent, TProgressComponent],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.scss',\r\n})\r\nexport class AppComponent {\r\n  data: MockUser[] = createMockData(100);\r\n}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<h2>Sortable and paginated t-grid component example:</h2>\r\n<t-grid [data]=\"data\" [sortable]=\"true\" [pageSize]=\"20\">\r\n  <t-column [name]=\"'ID'\" [property]=\"'id'\" [sortable]=\"false\"></t-column>\r\n  <t-column\r\n    [name]=\"'First Name'\"\r\n    [property]=\"'firstName'\"\r\n    [sortable]=\"true\"\r\n  ></t-column>\r\n  <t-column\r\n    [name]=\"'Last Name'\"\r\n    [property]=\"'lastName'\"\r\n    [sortable]=\"true\"\r\n  ></t-column>\r\n  <t-column\r\n    [name]=\"'Points'\"\r\n    [property]=\"'points'\"\r\n    [sortable]=\"true\"\r\n  ></t-column>\r\n</t-grid>\r\n\r\n<h2>Progress circle example:</h2>\r\n<t-progress [radius]=\"80\" [progress]=\"90\" [color]=\"'green'\"> </t-progress>\r\n"
        },
        {
            "name": "TColumnComponent",
            "id": "component-TColumnComponent-017f5b074f8107752c97ed84aa2418f10f5f8e487d62a222899b29d4d591c52ca7c6be5d30008c18d0d32834ecaa2f0bec9a07f554a7ccdacf4848c2593f59b9",
            "file": "src/app/components/t-column/t-column.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "t-column",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./t-column.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "property",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "sortable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 't-column',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './t-column.component.html',\r\n  styleUrl: './t-column.component.scss',\r\n})\r\nexport class TColumnComponent<T> {\r\n  @Input() name: string;\r\n  @Input() property: keyof T;\r\n  @Input() sortable: boolean;\r\n}\r\n",
            "styleUrl": "./t-column.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": ""
        },
        {
            "name": "TGridComponent",
            "id": "component-TGridComponent-10899d58d7d48536ff073ffe029c5f7ddc543cf5ebd5f7400926857258bbe9084d0ff6e59e5ffab0ff1712f4f79d42538de529fac79a0bf300015d7b2d9dcbfb",
            "file": "src/app/components/t-grid/t-grid.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "t-grid",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./t-grid.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "T[] | Observable<T[]>",
                    "decorators": []
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "number | null",
                    "decorators": []
                },
                {
                    "name": "sortable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "paginationChange",
                    "defaultValue": "new EventEmitter<PaginationChangeEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "EventEmitter"
                },
                {
                    "name": "sortChange",
                    "defaultValue": "new EventEmitter<SortChangeEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "columnQuery",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TColumnComponent<T>>",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TColumnComponent"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "currentPage",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "direction",
                    "defaultValue": "Direction.NONE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Direction",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "displayData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "originalData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "sortedData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "sortProperty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "viewPort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CdkVirtualScrollViewport",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CdkVirtualScrollViewport, {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getTableHeaderTop",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleColumnClick",
                    "args": [
                        {
                            "name": "column",
                            "type": "TColumnComponent<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TColumnComponent<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePageChangeButtonClick",
                    "args": [
                        {
                            "name": "step",
                            "type": "\"1\" | ",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "step",
                            "type": "\"1\" | ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePageSizeChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sortData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateDirection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateDisplayData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updatePage",
                    "args": [
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageSize",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TColumnComponent",
                    "type": "component"
                },
                {
                    "name": "ScrollingModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { TColumnComponent } from '../t-column/t-column.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  CdkVirtualScrollViewport,\r\n  ScrollingModule,\r\n} from '@angular/cdk/scrolling';\r\n\r\nexport enum Direction {\r\n  NONE = 'none',\r\n  ASCENDING = 'asc',\r\n  DESCENDING = 'desc',\r\n}\r\n\r\nexport type SortChangeEvent = {\r\n  columnName: string;\r\n  direction: Direction;\r\n};\r\n\r\nexport type PaginationChangeEvent = {\r\n  currentPage: number;\r\n  pageSize: number | null;\r\n};\r\n\r\n@Component({\r\n  selector: 't-grid',\r\n  standalone: true,\r\n  imports: [CommonModule, TColumnComponent, ScrollingModule],\r\n  templateUrl: './t-grid.component.html',\r\n  styleUrl: './t-grid.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TGridComponent<T> {\r\n  @Input() data: T[] | Observable<T[]>;\r\n  @Input() sortable: boolean;\r\n  @Input() pageSize: number | null;\r\n  @Output() sortChange = new EventEmitter<SortChangeEvent>();\r\n  @Output() paginationChange = new EventEmitter<PaginationChangeEvent>();\r\n\r\n  @ContentChildren(TColumnComponent) columnQuery: QueryList<\r\n    TColumnComponent<T>\r\n  >;\r\n  @ViewChild(CdkVirtualScrollViewport, { static: false })\r\n  public viewPort: CdkVirtualScrollViewport;\r\n\r\n  originalData: T[] = [];\r\n  sortedData: T[] = [];\r\n  // this.displayData will represent the data entries to be displayed within the table\r\n  // usually, a section of this.sortedData\r\n  displayData: T[] = [];\r\n  currentPage: number = 1;\r\n  sortProperty?: keyof T;\r\n  direction: Direction = Direction.NONE;\r\n  isLoading: boolean = false;\r\n\r\n  constructor(private changeDetectorRef: ChangeDetectorRef) {}\r\n\r\n  ngOnInit() {\r\n    if (this.data instanceof Observable) {\r\n      this.isLoading = true;\r\n      this.data.subscribe({\r\n        next: (nextData) => {\r\n          this.originalData = [...this.originalData, ...nextData];\r\n          // The reason that I am doing it here instead of on the `complete` method\r\n          // Is that maybe the pageSize is large/null and it need to constantly update the displayedData\r\n          this.displayData = this.originalData.slice(\r\n            0,\r\n            this.pageSize || this.originalData.length,\r\n          );\r\n          this.changeDetectorRef.detectChanges();\r\n        },\r\n        error: (error) => {\r\n          console.error(error);\r\n        },\r\n        complete: () => {\r\n          this.isLoading = false;\r\n          this.sortedData = [...this.originalData];\r\n          this.changeDetectorRef.detectChanges();\r\n        },\r\n      });\r\n    } else {\r\n      this.displayData = this.data.slice(0, this.pageSize || this.data.length);\r\n      this.originalData = [...this.data];\r\n      this.sortedData = [...this.data];\r\n    }\r\n  }\r\n\r\n  updatePage(pageNumber: number, pageSize: number | null) {\r\n    if (!this.pageSize) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      pageNumber < 1 ||\r\n      pageNumber > Math.ceil(this.originalData.length / this.pageSize) ||\r\n      pageSize === null ||\r\n      pageSize < 1\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // Early exit here to avoid events emitted in case nothing changes.\r\n    if (this.currentPage === pageNumber && this.pageSize === pageSize) {\r\n      return;\r\n    }\r\n\r\n    this.currentPage = pageNumber;\r\n    this.pageSize = pageSize;\r\n    this.paginationChange.emit({\r\n      pageSize: this.pageSize,\r\n      currentPage: this.currentPage,\r\n    });\r\n  }\r\n\r\n  updateDirection() {\r\n    if (this.direction === Direction.NONE) {\r\n      this.direction = Direction.ASCENDING;\r\n    } else if (this.direction === Direction.ASCENDING) {\r\n      this.direction = Direction.DESCENDING;\r\n    } else {\r\n      this.direction = Direction.NONE;\r\n    }\r\n\r\n    this.sortChange.emit({\r\n      columnName: this.sortProperty as string,\r\n      direction: this.direction,\r\n    });\r\n  }\r\n\r\n  updateDisplayData() {\r\n    const pageSize = this.pageSize || this.sortedData.length;\r\n    this.displayData = this.sortedData.slice(\r\n      (this.currentPage - 1) * pageSize,\r\n      this.currentPage * pageSize,\r\n    );\r\n  }\r\n\r\n  sortData() {\r\n    if (this.direction === Direction.NONE) {\r\n      this.sortedData = [...this.originalData];\r\n    } else if (this.direction === Direction.ASCENDING) {\r\n      this.sortedData.sort((a, b) => {\r\n        const valueA = a[this.sortProperty as keyof T];\r\n        const valueB = b[this.sortProperty as keyof T];\r\n\r\n        return valueA < valueB ? -1 : 1;\r\n      });\r\n    } else {\r\n      this.sortedData.reverse();\r\n    }\r\n  }\r\n\r\n  handleColumnClick(column: TColumnComponent<T>) {\r\n    if (!this.sortable || !column.sortable) {\r\n      return;\r\n    }\r\n\r\n    if (this.sortProperty !== column.property) {\r\n      this.sortProperty = column.property;\r\n      this.direction = Direction.NONE;\r\n    }\r\n\r\n    this.updateDirection();\r\n    this.sortData();\r\n    this.updatePage(1, this.pageSize);\r\n    this.updateDisplayData();\r\n  }\r\n\r\n  handlePageChangeButtonClick(step: 1 | -1) {\r\n    const newPage = this.currentPage + step;\r\n    this.updatePage(newPage, this.pageSize);\r\n    if (newPage > 0) {\r\n      this.updateDisplayData();\r\n    }\r\n  }\r\n\r\n  handlePageSizeChange(event: Event) {\r\n    const input = event.target as HTMLInputElement;\r\n    const newPageSize = parseInt(input.value);\r\n    this.updatePage(1, newPageSize);\r\n    this.updateDisplayData();\r\n  }\r\n\r\n  // A hack-ish way to get the `top` attribute value for the sticky <thead>\r\n  getTableHeaderTop() {\r\n    if (!this.viewPort || !this.viewPort['_renderedContentOffset']) {\r\n      return '-2px';\r\n    }\r\n    const offset = this.viewPort['_renderedContentOffset'];\r\n    return `-${offset + 2}px`;\r\n  }\r\n}\r\n",
            "styleUrl": "./t-grid.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"table-wrapper\">\r\n  <cdk-virtual-scroll-viewport itemSize=\"36\" style=\"height: 400px; width: 100%\">\r\n    <table>\r\n      <thead [style.top]=\"getTableHeaderTop()\">\r\n        <tr>\r\n          <th\r\n            *ngFor=\"let column of columnQuery\"\r\n            (click)=\"handleColumnClick(column)\"\r\n          >\r\n            <button\r\n              [ngClass]=\"{ sortable: sortable && column.sortable }\"\r\n              [disabled]=\"isLoading\"\r\n            >\r\n              <!--I've had some problems loading SVG files into the html template, so I added it manually, sorry-->\r\n              <svg\r\n                [ngSwitch]=\"sortProperty === column.property && direction\"\r\n                width=\"15\"\r\n                height=\"15\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <ng-container *ngSwitchCase=\"'asc'\">\r\n                  <polyline\r\n                    points=\"19 10 12 3 5 10\"\r\n                    fill=\"none\"\r\n                    stroke=\"white\"\r\n                    stroke-width=\"3\"\r\n                    stroke-miterlimit=\"10\"\r\n                  />\r\n                  <line\r\n                    x1=\"12\"\r\n                    y1=\"3\"\r\n                    x2=\"12\"\r\n                    y2=\"22\"\r\n                    fill=\"none\"\r\n                    stroke=\"white\"\r\n                    stroke-width=\"3\"\r\n                    stroke-miterlimit=\"10\"\r\n                  />\r\n                </ng-container>\r\n                <ng-container *ngSwitchCase=\"'desc'\">\r\n                  <polyline\r\n                    points=\"5 14 12 21 19 14\"\r\n                    fill=\"none\"\r\n                    stroke=\"white\"\r\n                    stroke-width=\"3\"\r\n                    stroke-miterlimit=\"10\"\r\n                  />\r\n                  <line\r\n                    x1=\"12\"\r\n                    y1=\"21\"\r\n                    x2=\"12\"\r\n                    y2=\"2\"\r\n                    fill=\"none\"\r\n                    stroke=\"white\"\r\n                    stroke-width=\"3\"\r\n                    stroke-miterlimit=\"10\"\r\n                  />\r\n                </ng-container>\r\n                <ng-container *ngSwitchCase=\"'none'\"></ng-container>\r\n              </svg>\r\n              <span>\r\n                {{ column.name }}\r\n              </span>\r\n            </button>\r\n          </th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <ng-content\r\n          *ngIf=\"\r\n            isLoading && originalData.length === 0;\r\n            then thenBlock;\r\n            else elseBlock\r\n          \"\r\n        ></ng-content>\r\n        <ng-template #thenBlock> <div class=\"loader\"></div> </ng-template>\r\n        <ng-template #elseBlock>\r\n          <tr *cdkVirtualFor=\"let item of displayData; templateCacheSize: 0\">\r\n            <td *ngFor=\"let column of columnQuery\">\r\n              <div>\r\n                {{ item[column.property] }}\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        </ng-template>\r\n      </tbody>\r\n    </table>\r\n  </cdk-virtual-scroll-viewport>\r\n  <div class=\"control-wrapper\" *ngIf=\"pageSize !== null\">\r\n    <div class=\"total\">\r\n      <span>\r\n        Total: {{ originalData.length }} {{ isLoading ? \"(loading...)\" : \"\" }}\r\n      </span>\r\n    </div>\r\n    <div class=\"page-number\">\r\n      <button [disabled]=\"isLoading\" (click)=\"handlePageChangeButtonClick(-1)\">\r\n        Back\r\n      </button>\r\n      <span> Page: {{ currentPage }} </span>\r\n      <button [disabled]=\"isLoading\" (click)=\"handlePageChangeButtonClick(+1)\">\r\n        Next\r\n      </button>\r\n    </div>\r\n    <div class=\"page-size\">\r\n      <label for=\"pageSize\"> Page size: </label>\r\n      <input\r\n        id=\"pageSize\"\r\n        type=\"number\"\r\n        min=\"1\"\r\n        [value]=\"pageSize\"\r\n        [disabled]=\"isLoading\"\r\n        (change)=\"handlePageSizeChange($event)\"\r\n      />\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "TProgressComponent",
            "id": "component-TProgressComponent-fa85e4efc9a675a7a4b1bb3db1944db9cc653294bdd1eb1e53279798bf633a35281b6fc9a3a84792d5ea8404da60f3977d50666e29cdc775c7ad7e05e6319b01",
            "file": "src/app/components/t-progress/t-progress.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "t-progress",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./t-progress.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "progress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "radius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "complete",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "margin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "MAXIMUM_PROGRESS",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "MINIMUM_PROGRESS",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "MINIMUM_RADIUS",
                    "defaultValue": "50",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "renderProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "renderRadius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "getPathString",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  NO_ERRORS_SCHEMA,\r\n  Output,\r\n} from '@angular/core';\r\n\r\ntype Point = {\r\n  x: number;\r\n  y: number;\r\n};\r\n\r\n@Component({\r\n  selector: 't-progress',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  schemas: [NO_ERRORS_SCHEMA],\r\n  templateUrl: './t-progress.component.html',\r\n  styleUrl: './t-progress.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TProgressComponent {\r\n  @Input() radius: number;\r\n  @Input() progress: number;\r\n  @Input() color: string;\r\n  @Output() complete = new EventEmitter<void>();\r\n\r\n  renderRadius: number;\r\n  renderProgress: number;\r\n  // A safety margin proportional to the radius so that the circle stroke does not overflow outside the svg element.\r\n  margin: number;\r\n\r\n  public readonly MINIMUM_RADIUS: number = 50;\r\n  public readonly MINIMUM_PROGRESS: number = 0;\r\n  public readonly MAXIMUM_PROGRESS: number = 100;\r\n\r\n  ngOnChanges() {\r\n    this.renderRadius = Math.max(this.MINIMUM_RADIUS, this.radius);\r\n    this.renderProgress = Math.max(\r\n      this.MINIMUM_PROGRESS,\r\n      Math.min(this.MAXIMUM_PROGRESS, this.progress),\r\n    );\r\n    this.margin = 0.1 * this.renderRadius;\r\n\r\n    if (this.renderProgress === this.MAXIMUM_PROGRESS) {\r\n      this.complete.emit();\r\n    }\r\n  }\r\n\r\n  getPathString() {\r\n    const centerPoint: Point = {\r\n      x: this.renderRadius + this.margin,\r\n      y: this.renderRadius + this.margin,\r\n    };\r\n\r\n    // Point at the top of the circle.\r\n    const startPoint: Point = {\r\n      x: this.renderRadius + this.margin,\r\n      y: this.margin,\r\n    };\r\n\r\n    // The angle describing the circle arc - directly proportional to the progress.\r\n    const arcAngle = (2 * Math.PI * this.renderProgress) / 100;\r\n\r\n    // Angle measured against the Ox axis.\r\n    const referenceAngle = Math.PI / 2 - arcAngle;\r\n\r\n    // End point of circle arc.\r\n    const endPoint: Point = {\r\n      x: centerPoint.x + this.renderRadius * Math.cos(referenceAngle),\r\n      y: centerPoint.y - this.renderRadius * Math.sin(referenceAngle),\r\n    };\r\n\r\n    const largeArcFlag = this.renderProgress >= 50 ? 1 : 0;\r\n\r\n    return `M ${startPoint.x}, ${startPoint.y} A ${this.renderRadius}, ${this.renderRadius}, 0 ${largeArcFlag} 1 ${endPoint.x}, ${endPoint.y}`;\r\n  }\r\n}\r\n",
            "styleUrl": "./t-progress.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<svg\r\n  attr.height=\"{{ (renderRadius + margin) * 2 }}px\"\r\n  attr.width=\"{{ (renderRadius + margin) * 2 }}px\"\r\n  attr.viewBox=\"0 0 {{ (renderRadius + margin) * 2 }} {{\r\n    (renderRadius + margin) * 2\r\n  }}\"\r\n>\r\n  <div *ngIf=\"renderProgress < 100; then thenBlock; else elseBlock\"></div>\r\n  <ng-template #thenBlock>\r\n    <path\r\n      *ngIf=\"renderProgress > 0\"\r\n      fill=\"none\"\r\n      attr.stroke=\"{{ color }}\"\r\n      attr.stroke-width=\"{{ 0.1 * renderRadius }}\"\r\n      stroke-linecap=\"round\"\r\n      attr.d=\"{{ getPathString() }}\"\r\n    />\r\n  </ng-template>\r\n  <ng-template #elseBlock>\r\n    <circle\r\n      fill=\"none\"\r\n      attr.stroke=\"{{ color }}\"\r\n      attr.stroke-width=\"{{ 0.1 * renderRadius }}\"\r\n      attr.cx=\"{{ renderRadius + margin }}\"\r\n      attr.cy=\"{{ renderRadius + margin }}\"\r\n      attr.r=\"{{ renderRadius }}\"\r\n    />\r\n  </ng-template>\r\n  <text\r\n    [ngStyle]=\"{\r\n      'font-size': 0.7 * renderRadius,\r\n      fill: color,\r\n      stroke: color\r\n    }\"\r\n    attr.x=\"{{ renderRadius + margin }}\"\r\n    attr.y=\"{{ renderRadius + margin }}\"\r\n  >\r\n    {{ renderProgress }}%\r\n  </text>\r\n</svg>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [provideRouter(routes)],\r\n}"
            },
            {
                "name": "createMockData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/t-grid/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(count: number) =>\r\n  faker.helpers.multiple(createMockUser, {\r\n    count,\r\n  })"
            },
            {
                "name": "createMockDataObservable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/t-grid/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(count: number) => {\r\n  const dataObservable = of(\r\n    faker.helpers.multiple(createMockUser, { count }),\r\n    faker.helpers.multiple(createMockUser, { count }),\r\n    faker.helpers.multiple(createMockUser, { count }),\r\n  );\r\n  return dataObservable.pipe(concatMap((item) => of(item).pipe(delay(2500))));\r\n}"
            },
            {
                "name": "createMockUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/t-grid/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): MockUser => ({\r\n  id: faker.string.nanoid(10),\r\n  firstName: faker.person.firstName(),\r\n  lastName: faker.person.lastName(),\r\n  phoneNumber: faker.phone.imei(),\r\n  email: faker.internet.email(),\r\n  address: faker.location.streetAddress(),\r\n  points: faker.number.int({ min: -100, max: 100 }),\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ColumnData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/stories/t-grid/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "MockUser",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/stories/t-grid/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "PaginationChangeEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/components/t-grid/t-grid.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "Point",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/components/t-progress/t-progress.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "SortChangeEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/components/t-grid/t-grid.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            }
        ],
        "enumerations": [
            {
                "name": "Direction",
                "childs": [
                    {
                        "name": "NONE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "none"
                    },
                    {
                        "name": "ASCENDING",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "asc"
                    },
                    {
                        "name": "DESCENDING",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "desc"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/t-grid/t-grid.component.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [provideRouter(routes)],\r\n}"
                }
            ],
            "src/stories/t-grid/utils.ts": [
                {
                    "name": "createMockData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/t-grid/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(count: number) =>\r\n  faker.helpers.multiple(createMockUser, {\r\n    count,\r\n  })"
                },
                {
                    "name": "createMockDataObservable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/t-grid/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(count: number) => {\r\n  const dataObservable = of(\r\n    faker.helpers.multiple(createMockUser, { count }),\r\n    faker.helpers.multiple(createMockUser, { count }),\r\n    faker.helpers.multiple(createMockUser, { count }),\r\n  );\r\n  return dataObservable.pipe(concatMap((item) => of(item).pipe(delay(2500))));\r\n}"
                },
                {
                    "name": "createMockUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/t-grid/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): MockUser => ({\r\n  id: faker.string.nanoid(10),\r\n  firstName: faker.person.firstName(),\r\n  lastName: faker.person.lastName(),\r\n  phoneNumber: faker.phone.imei(),\r\n  email: faker.internet.email(),\r\n  address: faker.location.streetAddress(),\r\n  points: faker.number.int({ min: -100, max: 100 }),\r\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/components/t-grid/t-grid.component.ts": [
                {
                    "name": "Direction",
                    "childs": [
                        {
                            "name": "NONE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "none"
                        },
                        {
                            "name": "ASCENDING",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "asc"
                        },
                        {
                            "name": "DESCENDING",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "desc"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/t-grid/t-grid.component.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/stories/t-grid/utils.ts": [
                {
                    "name": "ColumnData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/stories/t-grid/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "MockUser",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/stories/t-grid/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/components/t-grid/t-grid.component.ts": [
                {
                    "name": "PaginationChangeEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/components/t-grid/t-grid.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "SortChangeEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/components/t-grid/t-grid.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/components/t-progress/t-progress.component.ts": [
                {
                    "name": "Point",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/components/t-progress/t-progress.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/t-column/t-column.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TColumnComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/t-grid/t-grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TGridComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/components/t-progress/t-progress.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TProgressComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/stories/t-grid/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createMockData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/t-grid/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createMockDataObservable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/t-grid/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createMockUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}